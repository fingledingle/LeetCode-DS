Recursion


Recursion is a problem solving method. In code, recursion is implemented using a function that calls itself.

The opposite of a recursive algorithm would be an iterative algorithm. There is a branch of study that proves that
any interative algorthm can be written recursively. WHile iterative algorthms use for loops and while loops to
simulate repetition, recursive algorthms use function calls to simulate the same logic.



Let's say that we wanted to print the numbers frm 1 to 10: here's some pseudo code for an interative algorthm:



for (int i = 1; i < = 10; i++){
    print(i)
}


Here's some pseudo code for an equivalent recursive algorithm

function fn(i):
    print(i)
    fn(i + 1)
    return

fn(1)


Each call to fn first prints i (which starts at 1), and then calls fn again, but incrementing i (to print the next number).


//The first function call prints 1, then calls fn(2). In fn(2), we print 2, then call fn(3) and so on.


However, this code is actually wrong. Do you see the problem? The function calls ill never stop!
Running this code would print natural numbers(positive integers) infinitely (or until the computer exploded).
The return line never gets reached because fn(i+1) comes before it


We need what is called a base case to make the recursion stop. Base cases are conditions at the start of recursive functions
that terminate the calls.


function fn(i):
    if i > 10:
        return
    print(i)
    fn(i + 1)
    return

fn(1)


//After we call fn(10), we print 10 and call fn(11). In the fn(11) call, we trigger the base casesand return.
So now we are back in the call to fn(10) and move to the next line, which is return statement.
This makes us return back to the fn(9) call and so on, until we eventually return from fn(1) and the algortihm terminates.


An important thing to understand about recursion is the order in which the code runs - the order in which the 
computer executes instructions. With an iterative program, it's easy - start at the top, and go line by line.
With recursion, it can get confusing because calls can cascade on top of each other. Let's print numbers again
but this time only up to 3. Let's also add another print statement and number the lines.


function fn(i):
    if i > 3:
        return

    print(i)   //prints number
    fn(i + 1)  //once it gets here it goes back
    print(f"End of call where I = {i}")
    return

fn(1)

If you ran this code, you would see the following in the output:

// 1
// 2
// 3
// End of call where i = 3
// End of call where i = 2
// End of call where i = 1



As you can see, the line where we print texxt is executed in reverse order. The original call fn(1) first prints 1,
then calls to fn(2), which prints 2, then calls to fn(3), which prints 3, then calls to fn(4). Now, this is the important part:
How recursion "moves" back "up"? fn(4) triggers the base case, which returns. We are now back in the function call where i = 3
and line 4 has finished, so we move back to the line 5 which prints "End of call where i = 3". Once that line runs,
we move to the next line, which is a return. Now we are back in the function call where i = 2 and line 4 line has finished,
so again we move to the next line and print "End of the call where i = 2". This repeats until the original function call to fn(1)


//Every function call "exists" until it returns. When we move to a different function call, the old one waits
until the new one returns. The order in which the calls happens is remembered, and the lines within the functins are executed in order.

Note that each function call also has its own local scope. So in the example above, when we csall f(3), there are 3 "versions" of i 
simultaneously. The first call has i = 1, the second has i = 2, and the third call has i = 3. Let's say that we weree to do i += 1
in the f(3) call. Then i becomes 4 but only in the f(3) call. The other 2 "versions" of i are unnaffected because they are in different scopes.


